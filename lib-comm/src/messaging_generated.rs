// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

pub enum MessageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Message<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Message<'a> {
    type Inner = Message<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Message<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Message {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MessageArgs<'args>) -> flatbuffers::WIPOffset<Message<'bldr>> {
      let mut builder = MessageBuilder::new(_fbb);
      builder.add_uptime(args.uptime);
      builder.add_seq(args.seq);
      if let Some(x) = args.sensor_id { builder.add_sensor_id(x); }
      if let Some(x) = args.payload { builder.add_payload(x); }
      builder.add_ptype(args.ptype);
      builder.finish()
    }

    pub const VT_SEQ: flatbuffers::VOffsetT = 4;
    pub const VT_UPTIME: flatbuffers::VOffsetT = 6;
    pub const VT_PTYPE: flatbuffers::VOffsetT = 8;
    pub const VT_PAYLOAD: flatbuffers::VOffsetT = 10;
    pub const VT_SENSOR_ID: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn seq(&self) -> u64 {
    self._tab.get::<u64>(Message::VT_SEQ, Some(0)).unwrap()
  }
  #[inline]
  pub fn uptime(&self) -> u64 {
    self._tab.get::<u64>(Message::VT_UPTIME, Some(0)).unwrap()
  }
  #[inline]
  pub fn ptype(&self) -> u8 {
    self._tab.get::<u8>(Message::VT_PTYPE, Some(0)).unwrap()
  }
  #[inline]
  pub fn payload(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Message::VT_PAYLOAD, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn sensor_id(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Message::VT_SENSOR_ID, None)
  }
}

pub struct MessageArgs<'a> {
    pub seq: u64,
    pub uptime: u64,
    pub ptype: u8,
    pub payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub sensor_id: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for MessageArgs<'a> {
    #[inline]
    fn default() -> Self {
        MessageArgs {
            seq: 0,
            uptime: 0,
            ptype: 0,
            payload: None,
            sensor_id: None,
        }
    }
}
pub struct MessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_seq(&mut self, seq: u64) {
    self.fbb_.push_slot::<u64>(Message::VT_SEQ, seq, 0);
  }
  #[inline]
  pub fn add_uptime(&mut self, uptime: u64) {
    self.fbb_.push_slot::<u64>(Message::VT_UPTIME, uptime, 0);
  }
  #[inline]
  pub fn add_ptype(&mut self, ptype: u8) {
    self.fbb_.push_slot::<u8>(Message::VT_PTYPE, ptype, 0);
  }
  #[inline]
  pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_PAYLOAD, payload);
  }
  #[inline]
  pub fn add_sensor_id(&mut self, sensor_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_SENSOR_ID, sensor_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Message<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_message<'a>(buf: &'a [u8]) -> Message<'a> {
  flatbuffers::get_root::<Message<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_message<'a>(buf: &'a [u8]) -> Message<'a> {
  flatbuffers::get_size_prefixed_root::<Message<'a>>(buf)
}

#[inline]
pub fn finish_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Message<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Message<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
